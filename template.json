{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "subscriptionId": {
            "type": "string"
        },
        "location": {
            "type": "string"
        },
        "funcName": {
            "type": "string"
        },
        "funcHostingPlanName": {
            "type": "string"
        },
        "funcServerFarmResourceGroup": {
            "type": "string"
        },
        "funcAlwaysOn": {
            "type": "bool"
        },
        "funcStorageAccountName": {
            "type": "string"
        },
        "funcSku": {
            "type": "string"
        },
        "funcSkuCode": {
            "type": "string"
        },
        "funcWorkerSize": {
            "type": "string"
        },
        "funcWorkerSizeId": {
            "type": "string"
        },
        "funcNumberOfWorkers": {
            "type": "string"
        },
        "funcExtensionVersion": {
            "type": "string"
        },
        "sqlAdministratorLogin": {
            "type": "string"
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring"
        },
        "sqlCollation": {
            "type": "string"
        },
        "sqlDatabaseName": {
            "type": "string"
        },
        "sqlTier": {
            "type": "string"
        },
        "sqlSkuName": {
            "type": "string"
        },
        "sqlMaxSizeBytes": {
            "type": "int"
        },
        "sqlServerName": {
            "type": "string"
        },
        "sqlSampleName": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlZoneRedundant": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlLicenseType": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlReadScaleOut": {
            "type": "string",
            "defaultValue": "Disabled"
        },
        "sqlNumberOfReplicas": {
            "type": "int",
            "defaultValue": 0
        },
        "sqlMinCapacity": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlAutoPauseDelay": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlEnableADS": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlAllowAzureIps": {
            "type": "bool",
            "defaultValue": true
        },
        "sqlDatabaseTags": {
            "type": "object",
            "defaultValue": {}
        },
        "sqlServerTags": {
            "type": "object",
            "defaultValue": {}
        },
        "sqlEnableVA": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlUseVAManagedIdentity": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "To enable vulnerability assessments, the user deploying this template must have an administrator or owner permissions."
            }
        },
        "sqlEnablePrivateEndpoint": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlPrivateEndpointNestedTemplateId": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointSubscriptionId": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointResourceGroup": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointName": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointLocation": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointSubnetId": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateLinkServiceName": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateLinkServiceServiceId": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointVnetSubscriptionId": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointVnetResourceGroup": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointVnetName": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointSubnetName": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlEnablePrivateDnsZone": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlPrivateLinkPrivateDnsZoneFQDN": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointDnsRecordUniqueId": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateEndpointTemplateLink": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateDnsForPrivateEndpointTemplateLink": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateDnsForPrivateEndpointNicTemplateLink": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlPrivateDnsForPrivateEndpointIpConfigTemplateLink": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlAllowClientIp": {
            "type": "bool",
            "defaultValue": false
        },
        "sqlClientIpRuleName": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlClientIpValue": {
            "type": "string",
            "defaultValue": ""
        },
        "sqlStorageAccountType": {
            "type": "string",
            "defaultValue": ""
        },
        "cosmosName": {
            "type": "string"
        },
        "cosmosDbName": {
            "type": "string"
        },
        "cosmosLocation": {
            "type": "string"
        },
        "cosmosLocationName": {
            "type": "string"
        },
        "cosmosDefaultExperience": {
            "type": "string"
        },
        "cosmosIsZoneRedundant": {
            "type": "string"
        },
        "cosmosFreeTier": {
            "type": "bool",
            "defaultValue": false
        },
        "firebaseCredentials": {
            "type": "string"
        },
        "environment": {
            "type": "string"
        },
        "cms-name": {
            "type": "string"
        },
        "keyvaultName": {
            "type": "string"
        },
        "keyvaultSku": {
            "type": "string"
        },
        "keyvaultAccessPolicies": {
            "type": "array"
        },
        "keyvaultTenant": {
            "type": "string"
        },
        "keyvaultEnabledForDeployment": {
            "type": "bool"
        },
        "keyvaultEnabledForTemplateDeployment": {
            "type": "bool"
        },
        "keyvaultEnabledForDiskEncryption": {
            "type": "bool"
        },
        "keyvaultEnableRbacAuthorization": {
            "type": "bool"
        },
        "keyvaultEnableSoftDelete": {
            "type": "bool"
        },
        "keyvaultSoftDeleteRetentionInDays": {
            "type": "int"
        },
        "keyvaultNetworkAcls": {
            "type": "object"
        },
        "redisName": {
            "type": "string"
        }
    },
    "resources": [
        {
            "apiVersion": "2018-11-01",
            "name": "[parameters('funcName')]",
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "location": "[parameters('location')]",
            "tags": {},
            "dependsOn": [
                "[concat('microsoft.insights/components/', parameters('funcName'))]",
                "[concat('Microsoft.Web/serverfarms/', parameters('funcHostingPlanName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', parameters('funcStorageAccountName'))]"
            ],
            "properties": {
                "name": "[parameters('funcName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "[parameters('funcExtensionVersion')]"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(concat('microsoft.insights/components/', parameters('funcName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(concat('microsoft.insights/components/', parameters('funcName')), '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[concat(toLower(parameters('funcName')), 'a47c')]"
                        },
                        {
                            "name": "CosmosPrimaryKey",
                            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), '2015-11-06').primaryMasterKey]"
                        },
                        {
                            "name": "CosmosEndpoint",
                            "value": "[concat('https://', parameters('cosmosName'), '.documents.azure.com:443/')]"
                        },
                        {
                            "name": "CosmosDbName",
                            "value": "[parameters('cosmosDbName')]"
                        },
                        {
                            "name": "FirebaseCredentials",
                            "value": "[parameters('firebaseCredentials')]"
                        },
                        {
                            "name": "Environment",
                            "value": "[parameters('environment')]"
                        }
                    ]
                },
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('funcServerFarmResourceGroup'), '/providers/Microsoft.Web/serverfarms/', parameters('funcHostingPlanName'))]",
                "clientAffinityEnabled": true
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2018-11-01",
            "name": "[concat(parameters('funcName'), '/web')]",
            "location": "West Europe",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('funcName'))]"
            ],
            "properties": {
                "cors": {
                    "allowedOrigins": [
                        "[concat('https://', parameters('cms-name'), '.azurewebsites.net')]",
                        "[concat('http://', parameters('cms-name'), '.azurewebsites.net')]"
                    ],
                    "supportCredentials": false
                }
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[parameters('funcHostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "kind": "",
            "tags": {},
            "dependsOn": [],
            "properties": {
                "name": "[parameters('funcHostingPlanName')]",
                "workerSize": "[parameters('funcWorkerSize')]",
                "workerSizeId": "[parameters('funcWorkerSizeId')]",
                "numberOfWorkers": "[parameters('funcNumberOfWorkers')]"
            },
            "sku": {
                "Tier": "[parameters('funcSku')]",
                "Name": "[parameters('funcSkuCode')]"
            }
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[parameters('funcName')]",
            "type": "microsoft.insights/components",
            "location": "westeurope",
            "tags": {},
            "properties": {
                "ApplicationId": "[parameters('funcName')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        {
            "apiVersion": "2019-06-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('funcStorageAccountName')]",
            "location": "[parameters('location')]",
            "tags": {},
            "sku": {
                "name": "Standard_LRS"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "condition": "[parameters('sqlEnableVA')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('storageName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "resources": [
                {
                    "condition": "[parameters('sqlUseVAManagedIdentity')]",
                    "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                    "apiVersion": "2018-09-01-preview",
                    "name": "[concat(variables('storageName'), '/Microsoft.Authorization/', variables('uniqueRoleGuid') )]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
                    ],
                    "properties": {
                        "roleDefinitionId": "[variables('StorageBlobContributor')]",
                        "principalId": "[reference(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), '2018-06-01-preview', 'Full').identity.principalId]",
                        "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
                        "principalType": "ServicePrincipal"
                    }
                }
            ]
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Sql/servers",
            "location": "[parameters('location')]",
            "tags": "[parameters('sqlServerTags')]",
            "name": "[parameters('sqlServerName')]",
            "properties": {
                "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
                "version": "12.0"
            },
            "identity": "[if(and(parameters('sqlEnableVA'),parameters('sqlUseVAManagedIdentity')), json('{\"type\":\"SystemAssigned\"}'), json('null'))]",
            "resources": [
                {
                    "apiVersion": "2018-06-01-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
                    ],
                    "location": "[parameters('location')]",
                    "tags": "[parameters('sqlDatabaseTags')]",
                    "name": "[parameters('sqlDatabaseName')]",
                    "properties": {
                        "collation": "[parameters('sqlCollation')]",
                        "maxSizeBytes": "[parameters('sqlMaxSizeBytes')]",
                        "sampleName": "[parameters('sqlSampleName')]",
                        "zoneRedundant": "[parameters('sqlZoneRedundant')]",
                        "licenseType": "[parameters('sqlLicenseType')]",
                        "readScale": "[parameters('sqlReadScaleOut')]",
                        "readReplicaCount": "[parameters('sqlNumberOfReplicas')]",
                        "minCapacity": "[parameters('sqlMinCapacity')]",
                        "autoPauseDelay": "[parameters('sqlAutoPauseDelay')]",
                        "storageAccountType": "[parameters('sqlStorageAccountType')]"
                    },
                    "sku": {
                        "name": "[parameters('sqlSkuName')]",
                        "tier": "[parameters('sqlTier')]"
                    },
                    "type": "databases"
                },
                {
                    "condition": "[parameters('sqlAllowAzureIps')]",
                    "apiVersion": "2014-04-01-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
                    ],
                    "location": "[parameters('location')]",
                    "name": "AllowAllWindowsAzureIps",
                    "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                    },
                    "type": "firewallrules"
                },
                {
                    "condition": "[parameters('sqlAllowClientIp')]",
                    "apiVersion": "2014-04-01-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]"
                    ],
                    "location": "[parameters('location')]",
                    "name": "[parameters('sqlClientIpRuleName')]",
                    "properties": {
                        "endIpAddress": "[parameters('sqlClientIpValue')]",
                        "startIpAddress": "[parameters('sqlClientIpValue')]"
                    },
                    "type": "firewallrules"
                },
                {
                    "condition": "[parameters('sqlEnableADS')]",
                    "apiVersion": "2017-03-01-preview",
                    "type": "securityAlertPolicies",
                    "name": "Default",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]",
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'), '/databases/', parameters('sqlDatabaseName'))]"                    
                    ],
                    "properties": {
                        "state": "Enabled",
                        "disabledAlerts": [],
                        "emailAddresses": [],
                        "emailAccountAdmins": true
                    }
                },
                {
                    "condition": "[parameters('sqlEnableVA')]",
                    "apiVersion": "2018-06-01-preview",
                    "type": "vulnerabilityAssessments",
                    "name": "Default",
                    "properties": {
                        "storageContainerPath": "[if(parameters('sqlEnableVA'), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))).primaryEndpoints.blob, 'vulnerability-assessment'), '')]",
                        "storageAccountAccessKey": "[if(and(parameters('sqlEnableVA'),not(parameters('sqlUseVAManagedIdentity'))), listKeys(variables('storageName'), '2018-02-01').keys[0].value, '')]",
                        "recurringScans": {
                            "isEnabled": true,
                            "emailSubscriptionAdmins": true,
                            "emails": []
                        }
                    },
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'))]",
                        "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                        "[concat('Microsoft.Sql/servers/', parameters('sqlServerName'), '/securityAlertPolicies/Default')]"
                    ]
                }
            ]
        },
        {
            "condition": "[parameters('sqlEnablePrivateEndpoint')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('deploymentTemplateApi')]",
            "name": "[variables('subnetPoliciesTemplateName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "apiVersion": "[variables('privateEndpointApi')]",
                            "name": "[concat(parameters('sqlPrivateEndpointVnetName'), '/', parameters('sqlPrivateEndpointSubnetName'))]",
                            "location": "[parameters('sqlPrivateEndpointLocation')]",
                            "properties": {
                                "privateEndpointNetworkPolicies": "Disabled"
                            },
                            "type": "Microsoft.Network/virtualNetworks/subnets"
                        }
                    ]
                }
            },
            "subscriptionId": "[if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointVnetSubscriptionId'), variables('subscriptionId'))]",
            "resourceGroup": "[if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointVnetResourceGroup'), variables('resourceGroupName'))]"
        },
        {
            "condition": "[parameters('sqlEnablePrivateEndpoint')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('deploymentTemplateApi')]",
            "name": "[variables('privateEndpointTemplateName')]",
            "dependsOn": [
                "[resourceId(variables('subscriptionId'), variables('resourceGroupName'), 'Microsoft.Sql/servers/databases/', parameters('sqlServerName'), parameters('sqlDatabaseName'))]",
                "[variables('subnetPoliciesTemplateName')]"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "privateEndpointName": {
                        "value": "[parameters('sqlPrivateEndpointName')]"
                    },
                    "privateEndpointConnectionId": {
                        "value": ""
                    },
                    "privateEndpointConnectionName": {
                        "value": "[parameters('sqlPrivateLinkServiceName')]"
                    },
                    "privateEndpointId": {
                        "value": "[variables('privateEndpointId')]"
                    },
                    "privateEndpointApiVersion": {
                        "value": "[variables('privateEndpointApi')]"
                    },
                    "privateLinkServiceId": {
                        "value": "[parameters('sqlPrivateLinkServiceServiceId')]"
                    },
                    "groupId": {
                        "value": "SqlServer"
                    },
                    "subnetId": {
                        "value": "[variables('privateEndpointSubnetResourceId')]"
                    },
                    "location": {
                        "value": "[parameters('sqlPrivateEndpointLocation')]"
                    },
                    "tags": {
                        "value": {}
                    }
                },
                "templatelink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[parameters('sqlPrivateEndpointTemplateLink')]"
                }
            },
            "subscriptionId": "[if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointSubscriptionId'), variables('subscriptionId'))]",
            "resourceGroup": "[if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointResourceGroup'), variables('resourceGroupName'))]"
        },
        {
            "condition": "[and(parameters('sqlEnablePrivateEndpoint'), parameters('sqlEnablePrivateDnsZone'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('deploymentTemplateApi')]",
            "name": "[concat('PrivateDns-', parameters('sqlPrivateEndpointNestedTemplateId'))]",
            "dependsOn": [
                "[variables('privateEndpointTemplateName')]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/privateDnsZones",
                            "apiVersion": "2018-09-01",
                            "name": "[parameters('sqlPrivateLinkPrivateDnsZoneFQDN')]",
                            "location": "global",
                            "tags": {},
                            "properties": {}
                        },
                        {
                            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                            "apiVersion": "2018-09-01",
                            "name": "[concat(parameters('sqlPrivateLinkPrivateDnsZoneFQDN'), '/', uniqueString(variables('privateEndpointVnetId')))]",
                            "location": "global",
                            "dependsOn": [
                                "[parameters('sqlPrivateLinkPrivateDnsZoneFQDN')]"
                            ],
                            "properties": {
                                "virtualNetwork": {
                                    "id": "[variables('privateEndpointVnetId')]"
                                },
                                "registrationEnabled": false
                            }
                        },
                        {
                            "apiVersion": "[variables('deploymentTemplateApi')]",
                            "name": "[concat('EndpointDnsRecords-', parameters('sqlPrivateEndpointDnsRecordUniqueId'))]",
                            "type": "Microsoft.Resources/deployments",
                            "dependsOn": [
                                "[parameters('sqlPrivateLinkPrivateDnsZoneFQDN')]"
                            ],
                            "properties": {
                                "mode": "Incremental",
                                "templatelink": {
                                    "contentVersion": "1.0.0.0",
                                    "uri": "[parameters('sqlPrivateDnsForPrivateEndpointTemplateLink')]"
                                },
                                "parameters": {
                                    "privateDnsName": {
                                        "value": "[parameters('sqlPrivateLinkPrivateDnsZoneFQDN')]"
                                    },
                                    "privateEndpointNicResourceId": {
                                        "value": "[if(parameters('sqlEnablePrivateEndpoint'), reference(concat('Microsoft.Resources/deployments/', variables('privateEndpointTemplateName'))).outputs.networkInterfaceId.value, '')]"
                                    },
                                    "nicRecordsTemplateUri": {
                                        "value": "[parameters('sqlPrivateDnsForPrivateEndpointNicTemplateLink')]"
                                    },
                                    "ipConfigRecordsTemplateUri": {
                                        "value": "[parameters('sqlPrivateDnsForPrivateEndpointIpConfigTemplateLink')]"
                                    },
                                    "uniqueId": {
                                        "value": "[parameters('sqlPrivateEndpointDnsRecordUniqueId')]"
                                    },
                                    "existingRecords": {
                                        "value": {}
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "subscriptionId": "[if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointVnetSubscriptionId'), variables('subscriptionId'))]",
            "resourceGroup": "[if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointVnetResourceGroup'), variables('resourceGroupName'))]"
        },
        {
            "apiVersion": "2020-04-01",
            "kind": "GlobalDocumentDB",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('cosmosName')]",
            "location": "[parameters('cosmosLocation')]",
            "properties": {
                "databaseAccountOfferType": "Standard",
                "locations": [
                    {
                        "id": "[concat(parameters('cosmosName'), '-', parameters('cosmosLocation'))]",
                        "failoverPriority": 0,
                        "locationName": "[parameters('cosmosLocationName')]"
                    }
                ],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8
                    }
                },
                "cors": [
                    {
                        "allowedOrigins": "[concat('https://', parameters('funcName'), '.azurewebsites.net')]"
                    }
                ],
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "ipRules": [
                    {
                        "ipAddressOrRange": "104.42.195.92"
                    },
                    {
                        "ipAddressOrRange": "40.76.54.131"
                    },
                    {
                        "ipAddressOrRange": "52.176.6.30"
                    },
                    {
                        "ipAddressOrRange": "52.169.50.45"
                    },
                    {
                        "ipAddressOrRange": "52.187.184.26"
                    },
                    {
                        "ipAddressOrRange": "0.0.0.0"
                    }
                ],
                "dependsOn": [],
                "enableMultipleWriteLocations": false,
                "capabilities": [],
                "enableFreeTier": "[parameters('cosmosFreeTier')]"
            },
            "tags": {
                "defaultExperience": "[parameters('cosmosDefaultExperience')]",
                "hidden-cosmos-mmspecial": "",
                "CosmosAccountType": "Production"
            }
        },
        {
            "name": "[parameters('redisName')]",
            "type": "Microsoft.Cache/redis",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "sku": {
                    "name": "Standard",
                    "family": "C",
                    "capacity": 0
                },
                "redisConfiguration": {},
                "enableNonSslPort": false,
                "redisVersion": "4"
            },
            "tags": {}
        },
        {
            "apiVersion": "2018-02-14",
            "name": "[parameters('keyvaultName')]",
            "location": "[parameters('location')]",
            "type": "Microsoft.KeyVault/vaults",
            "properties": {
                "enabledForDeployment": "[parameters('keyvaultEnabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('keyvaultEnabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('keyvaultEnabledForDiskEncryption')]",
                "enableRbacAuthorization": "[parameters('keyvaultEnableRbacAuthorization')]",
                "accessPolicies": "[parameters('keyvaultAccessPolicies')]",
                "tenantId": "[parameters('keyvaultTenant')]",
                "sku": {
                    "name": "[parameters('keyvaultSku')]",
                    "family": "A"
                },
                "enableSoftDelete": "[parameters('keyvaultEnableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('keyvaultSoftDeleteRetentionInDays')]",
                "networkAcls": "[parameters('keyvaultNetworkAcls')]"
            },
            "tags": {},
            "dependsOn": []
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2018-02-14",
            "name": "[concat(parameters('keyvaultName'), '/SqlConnectionString')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            ],
            "properties": {
                "value": "[concat('Server=tcp:', parameters('sqlServerName'), '.database.windows.net,1433;Initial Catalog=', parameters('sqlDatabaseName'), ';Persist Security Info=False;User ID=', parameters('sqlAdministratorLogin'), ';Password=', parameters('sqlAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2018-02-14",
            "name": "[concat(parameters('keyvaultName'), '/', parameters('redisName'))]",
            "location": "[parameters('locationKeyVault')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"       
            ],
            "properties": {
                "value": "[concat(parameters('redisName'),'.redis.cache.windows.net:6380,password=', listKeys(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2020-06-01').primaryKey,',ssl=True,abortConnect=False')]"
            }
        }
    ],
    "variables": {
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]",
        "uniqueStorage": "[uniqueString(variables('subscriptionId'), variables('resourceGroupName'), parameters('location'))]",
        "storageName": "[tolower(concat('sqlva', variables('uniqueStorage')))]",
        "privateEndpointContainerTemplateName": "[concat('PrivateEndpointContainer-', if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointNestedTemplateId'), ''))]",
        "subnetPoliciesTemplateName": "[concat('SubnetPolicies-', if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointNestedTemplateId'), ''))]",
        "privateEndpointTemplateName": "[concat('PrivateEndpoint-', if(parameters('sqlEnablePrivateEndpoint'), parameters('sqlPrivateEndpointNestedTemplateId'), ''))]",
        "deploymentTemplateApi": "2018-05-01",
        "privateEndpointApi": "2019-04-01",
        "privateEndpointId": "[if(parameters('sqlEnablePrivateEndpoint'), resourceId(parameters('sqlPrivateEndpointSubscriptionId'), parameters('sqlPrivateEndpointResourceGroup'), 'Microsoft.Network/privateEndpoints', parameters('sqlPrivateEndpointName')), '')]",
        "privateEndpointVnetId": "[if(parameters('sqlEnablePrivateEndpoint'), resourceId(parameters('sqlPrivateEndpointVnetSubscriptionId'), parameters('sqlPrivateEndpointVnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('sqlPrivateEndpointVnetName')), '')]",
        "privateEndpointSubnetResourceId": "[if(parameters('sqlEnablePrivateEndpoint'), resourceId(parameters('sqlPrivateEndpointVnetSubscriptionId'), parameters('sqlPrivateEndpointVnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('sqlPrivateEndpointVnetName'), parameters('sqlPrivateEndpointSubnetName')), '')]",
        "uniqueRoleGuid": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), variables('storageBlobContributor'), resourceId('Microsoft.Sql/servers', parameters('sqlServerName')))]",
        "StorageBlobContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
    }
}
